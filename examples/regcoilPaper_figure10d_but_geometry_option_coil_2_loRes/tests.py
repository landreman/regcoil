#!/usr/bin/env python

# These tests are mostly copied from the example regcoilPaper_figure10d_originalAngle_loRes.

# This python script checks the output file for an example to 
# see if the results are close to expected values.  This script may be
# run directly, and it is also called when "make test" is run from the
# main REGCOIL directory.

exec(open('../testsCommon.py').read())
absoluteTolerance = 1e-100

numFailures = 0

f = readOutputFile()

variableName = 'lambda'
data = f.variables[variableName][()]
relativeTolerance = 1e-12
numFailures += arrayShouldBe(data, [0, 1e-15, 1.33352143216332e-15, 1.77827941003892e-15,\
                                    2.37137370566166e-15, 3.16227766016838e-15, 4.21696503428582e-15,\
                                    5.62341325190349e-15, 7.49894209332456e-15, 1e-14],relativeTolerance,absoluteTolerance)


variableName = 'chi2_B'
data = f.variables[variableName][()]
relativeTolerance = 0.03
# Skip the lambda=0 case, which is pathological, and make sure the other ones are within a few % of the high-res results:
numFailures += arrayShouldBe(data[1:], [0.174519878306313, 0.233148551834137, \
    0.310446213587783, 0.411565852326815, 0.542616084841207, \
    0.710568315783369, 0.922890554110523, 1.18673864681126, 1.50770781013225],relativeTolerance,absoluteTolerance)

variableName = 'chi2_K'
data = f.variables[variableName][()]
relativeTolerance = 0.01
numFailures += arrayShouldBe(data[1:], [1.74957088182873e+15, 1.6989658516062e+15,\
    1.64892520707378e+15, 1.59982527129183e+15, 1.55209554042516e+15,\
    1.50621123410416e+15, 1.46269693947801e+15, 1.42212837760326e+15,\
    1.38509938973785e+15], relativeTolerance,absoluteTolerance)

variableName = 'max_Bnormal'
data = f.variables[variableName][()]
relativeTolerance = 0.03
numFailures += arrayShouldBe(data[1:], [0.117555544291034, 0.134561224876993,\
    0.153923792979921, 0.176347144447289, 0.201603899107085,\
    0.229977435728317, 0.261839981656698, 0.296625161466877, 0.333988791941713], relativeTolerance,absoluteTolerance)

variableName = 'max_K'
data = f.variables[variableName][()]
relativeTolerance = 0.06
numFailures += arrayShouldBe(data[1:], [ 8824481.60102707, 8355450.23653953,\
    7884212.39105115, 7412969.17310808, 6945281.57578389, 6485916.75531679,\
    6040435.92861007, 5614638.75966927, 5214018.48872153], relativeTolerance,absoluteTolerance)

variableName = 'single_valued_current_potential_mn'
data = f.variables[variableName][()]
#print data.shape
# We cannot exactly match data[0,:] with the example regcoilPaper_figure10d_originalAngle_loRes,
# since this data corresponds to no regularization and so is hyper-sensitive to differences in the offsetting algorithm.
# But we can match data[1,:], which corresponds to a sensible amount of regularization.
# Due to slight differences in the offset surfaces, we need pretty generous tolerances.
relativeTolerance = 0.03
absoluteTolerance = 800
numFailures += arrayShouldBe(data[1,:], [-636845.139192448, -93726.100985817, -12808.2679337137, -6436.11331882515, \
    -1681.81086973519, -485.628613896459, -51.0035530084606, \
    2.57965700650486, -3.08359685930898, -0.95839259239159, \
    -0.0542860537675785, 0.0589544960724215, 0.0184659230256529, \
    0.0769552670319529, -0.262669749613766, -1.85762870238826, \
    -4.48294147405658, 9.77123536044076, -28.4339720480356, \
    -450.405437429645, -2048.68587258934, -9542.84769319848, \
    -11669.3480566478, -126993.914047055, 200134.524174578, 780678.271122884, \
    221364.046785469, 48874.9084250086, 1732.76398357889, 2614.62551563965, \
    799.077029570748, 219.002026009396, 29.0188384278004, -3.1024899442833, \
    0.314721570012263, 0.0893881351479318, -0.0812851357532177, \
    0.00290851130928144, -0.0550572574676785, -0.147780529776928, \
    0.38376209245763, 2.36663288136853, 4.74859467921797, -19.3144909584734, \
    -76.8150486658404, -48.6780930746745, 956.722007151166, 3224.97803831513, \
    14791.0744397381, 157700.163165199, -487877.544270743, -165831.030675654, \
    -52754.7805491044, -3106.22754847172, 473.627446170829, \
    -561.542644462128, -117.003129564884, -25.9990546377287, \
    -0.621612316021711, 4.52433375939335, 0.78366288299259, \
    0.111023309228341, -0.00758576015460735, -0.00643956505715865, \
    0.154816558534507, 0.401147312418584, 0.0352085229246653, \
    -4.24674093374629, -8.32654759807846, 49.1679592736964, 177.523100278182, \
    418.431282522965, -1919.9181912971, 8164.06507384419, 12742.9035731632, \
    -125313.597804208, 251605.800949885, -26875.6370303012, \
    -6551.74001875138, 152.613961229345, -606.027206935648, \
    -222.877823486467, -62.1808469036173, -18.5690428992164, \
    -7.12477659577854, -2.97106388609079, -0.382819851517509, \
    -0.00503060124001372, 0.0161359845510441, -0.00998783802528895, \
    -0.368609249523516, -1.11292554363902, -2.01207279148648, \
    7.33366678816116, 14.9415662122255, -66.4299343505126, -65.7382483985067, \
    -499.849037166508, 5598.6008557347, -3111.17077838504, 8389.66498705812, \
    87851.854449707, -34120.1030577796, 38812.9747478082, -2556.15730402831, \
    -430.042936935821, 319.725970749222, 137.093492800773, 33.7420385155216, \
    10.2930579648087, 3.30062400243539, 0.861064214735285, \
    0.00367925130425598, 0.0139232158257035, -0.0222371785709498, \
    -0.0300175983684826, 0.645683067183313, 1.90363938028169, \
    6.55063199568604, -0.0326354551966688, -16.2130112965381, \
    -50.275102393623, -123.525433819699, 3257.47329534058, -8305.30343341391, \
    -7971.01752571554, 39625.692610642, -73762.1713333272, -48092.6536727011, \
    -11355.3822208888, -510.262304707652, 479.718899459551, 43.5788931587508, \
    -16.5903117683302, -7.70867912158858, 1.36885139892951, \
    0.0990160316681461, 0.00267920733865999, -0.00685727034461888, \
    -0.0283406794140528, 0.0356207864623813, 0.174783727405189, \
    -0.748386349705818, -0.799894357903513, -12.6643380901238, \
    -19.6013780623049, -14.5281290410233, 221.471071053636, 770.289884864596, \
    -6076.24785297526, -1618.96547832442, 5993.3173828301, -44505.6636867058  ],relativeTolerance,absoluteTolerance,requireSameLength=False)


del data
f.close()
print("numFailures:",numFailures)
exit(numFailures > 0)
